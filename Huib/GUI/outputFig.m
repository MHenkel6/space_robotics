classdef outputFig < handle
    %OUTPUTFIG Summary of this class goes here
    %   Detailed explanation goes here
    
    properties (Constant)
        angleTitles = {'\theta_i [rad]', ... 
                       'd\theta_i/dt [rad/s]', ...
                       'd^2\theta_i/dt^2 [rad/s^2]'}
        posLabels = {'x [m]', 'y [m]', 'z [m]'}
        figNames = {'Joint Outputs', 'Position Output'};
        % size & layout control of angle plots
        aHMargin = 0.025;
        aVMargin = 0.018;
        aVOffset = 0.03;
        aHOffset = 0.06;
        
        % size & layout control of position output text
        pWidth   = 0.1;
        pHeight  = 0.05;
        pVOffset = 0;
    end
        
    properties
        % graphics handles
        fig;                        % main figures
        axAngle = gobjects(6,3);    % axes objects for joint variables
        axPos = gobjects(1,1);      % axes object for path plotting
        hPosOut = gobjects(3,1);    % uicontrol boxes for position output
        pathLine;                   % 3D line of path taken by end effector
        
        % other objects
        
        
        % stored values
        posNow;
    end
    
    methods
        function self = outputFig(startPos)
            self.posNow = startPos;
        end
        
        
        %% fwefwefwe
        function createFigure(self)
            % close possible other instances of same figures
            for ii =1:2
                hFigTemp = findobj(...
                    'Type', 'Figure',...
                    'Name', self.figNames{ii});
                if ~isempty(hFigTemp)
                    close(hFigTemp)
                end
            end
            
            % create joint angle figure
            self.fig(1) = figure(...
                'units',            'Normalized',...
                'OuterPosition',    [0, 0, 0.5, 1],...
                'Name',             self.figNames{1},...
                'NumberTitle',      'off');
            
            % create 6 x 3 grid of 2-d plots for pos, vel and accel plotting
            aWidth  = (1 - 3*self.aHMargin - self.aHOffset)/3; % width of each axes
            aHeight = (1 - 6*self.aVMargin - 2*self.aVOffset)/6; % height of each axes
            for ii = 1:3 
                for jj = 1:6
                    self.axAngle(jj, ii) = axes(...
                        'Parent',           self.fig(1),...
                        'Units',            'normalized',...
                        'FontSize',         8,...
                        'Position',         [self.aHOffset + (ii - 1) * (aWidth + self.aHMargin),...
                                             1 - self.aVOffset - jj * aHeight - (jj - 1) * self.aVMargin,...
                                             aWidth,...
                                             aHeight] ...
                        );
                    if jj == 1 % add titles to topmost axes
                        title(self.angleTitles{ii});
                    end
                    if ii == 1 % add joint index to leftmost axes
                        ylabel(sprintf('i = %d', jj))
                    end
                    if jj == 6 % add time label for x-axis at bottom
                        xlabel('time [s]')
                    end
                end
            end
            
            
            % create position plot figure
            self.fig(2) = figure(...
                'units',            'pixels',...
                'OuterPosition',    [0, 0, 800, 800],...
                'Name',             self.figNames{2},...
                'NumberTitle',      'off');
            
            % create axes for path of end position output
            self.axPos = axes(...
                'Parent',           self.fig(2),...
                'Units',            'normalized',...
                'Position',         [0.02,...
                                     0.10,...
                                     0.96,...
                                     0.96],...
                'DataAspectRatioMOde', 'Manual',...
                'XLim',             [-2 2],...
                'YLim',             [-2 2],...
                'ZLim',             [-2 2],...
                'XGrid',            'on',...
                'YGrid',            'on',...
                'ZGrid',            'on',...
                'Projection',       'perspective',...
                'CameraPosition',   [20 20 20]);
            xlabel(self.posLabels{1});
            ylabel(self.posLabels{2});
            zlabel(self.posLabels{3});
            
            % 3d-path line graph
            self.pathLine = animatedline(self.axPos, ...
                self.posNow(1), self.posNow(2), self.posNow(3));
            
            % text output boxes
            for ii = 1:3
                uicontrol(...
                    'Style',            'text',...
                    'String',           self.posLabels{ii},...
                    'HorizontalAlignment', 'right',...
                    'Units',            'normalized',...
                    'FontSize',         15,...
                    'Position',         [ii/4-self.pWidth,...
                                         self.pVOffset,...
                                         self.pWidth,...
                                         self.pHeight]);
                    
                self.hPosOut(ii) = uicontrol(...
                    'Style',            'text',...
                    'String',           sprintf('%.2f', self.posNow(ii)),...
                    'FontSize',         15,...
                    'Units',            'normalized',...
                    'Position',         [ii/4,...
                                         self.pVOffset,...
                                         self.pWidth,...
                                         self.pHeight]);
            end
        end
        
        %% update current position of end effector
        function updatePos(self, ... 
                           newPos) % [x, y, z] position vector
            self.posNow = newPos;
            for ii = 1:3
                self.hPosOut(ii).String = sprintf('%.2f', self.posNow(ii));
            end
            addpoints(self.pathLine, self.posNow(1), self.posNow(2), self.posNow(3));
            drawnow;
        end
    end
end

